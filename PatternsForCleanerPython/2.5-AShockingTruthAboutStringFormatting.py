#1 – “Old Style” String Formatting
from string import Template

name = 'Farid'
string = "hello, %s" % name
print(string)
"""
Using the %x format specifier to convert an int value to a string and to represent it as a hexadecimal number
"""
errno = 43616161
print('Hey %s, there is a 0x%x error!' % (name, errno))
print('Hey %(name)s, there is a 0x%(errno)x error!' % {"name": name, "errno": errno })


#2 – “New Style” String Formatting
"""
Formatting is now handled by calling a format() function on a string object.
"""
print('Hello, {}'.format(name))
print('Hey {name}, there is a 0x{errno:x} error!'.format(name=name, errno=errno))


#3 – Literal String Interpolation (Python 3.6+)
print(f'Hello, {name}!')
a = 5
b = 10
print(f'Five plus ten is {a + b} and not {2 * (a + b)}.')

#4 – Template Strings
"""
We need to import the Template class from Python's built-in string module. The best use case for template strings is 
when you’re handling format strings generated by users of your program. Due to their reduced complexity,
template strings are a safer choice.

"""
templ_string = 'Hey $name, there is a $error error!'
print(Template(templ_string).substitute(name=name, error=hex(errno)))


"""
If your format strings are user-supplied, use Template Strings to avoid security issues. Otherwise, use Literal String 
Interpolation if you’re on Python 3.6+, and “New Style” String Formatting if you’re not.
"""